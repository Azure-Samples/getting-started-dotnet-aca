@page "/stores"
@using eShopLite.Store.DataEntities
@using eShopLite.Store.ApiClients
@rendermode InteractiveServer
@inject StoreInfoApiClient StoreApi
@inject ILogger<Stores> Logger

<PageTitle>Stores</PageTitle>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<h3>Stores</h3>

@if (stores == null)
{
    <div class="text-center p-3">
        <div class="spinner-container">
            <i class="bi bi-building spinner-icon" aria-hidden="true"></i>
        </div>
        <span class="visually-hidden">Loading store information...</span>
    </div>
}
else
{
    <button @onclick="ToggleSortOrder" class="btn btn-primary mb-3">@sortButtonText</button>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Hours</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var store in stores)
            {
                <tr>
                    <td><strong>@store.Name</strong></td>
                    <td>@store.City, @store.State</td>
                    <td>@store.Hours</td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    .spinner-container {
        display: inline-block;
        font-size: 2rem;
    }

    .spinner-icon {
        animation: spin 2s linear infinite;
        display: inline-block;
    }

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

@code {
    private IEnumerable<StoreInfo>? stores;
    private bool isSortByName = true;
    private string sortButtonText = "Sort by Location";
    private int currentCount = 0;

    protected override async Task OnInitializedAsync()
    {
        stores = await StoreApi.GetStoreInfoAsync();
        SortStores();
    }

    private void ToggleSortOrder()
    {
        isSortByName = !isSortByName;
        sortButtonText = isSortByName ? "Sort by Location" : "Sort by Name";
        SortStores();
        IncrementCount();
    }

    private void SortStores()
    {
        if (stores != null)
        {
            stores = isSortByName ? stores.OrderBy(s => s.Name) : stores.OrderBy(s => s.City).ThenBy(s => s.State);
        }
    }

    private void IncrementCount()
    {
        try
        {
            currentCount++;
            if (currentCount % 5 == 0)
            {
            throw new Exception("An error occurred at every 5th click.");
            }
        }
        catch (Exception ex)
        {
            // Log the exception using Console
            Console.WriteLine($"Exception caught: {ex.Message}");
            // Log the exception using ILogger
            Logger.LogError(ex, "Exception caught during IncrementCount");
        }

        currentCount++;
    }
}
